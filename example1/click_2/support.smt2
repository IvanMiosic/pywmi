(set-logic QF_UF)
(declare-fun sim_0 () Bool)
(declare-fun sim_1 () Bool)
(declare-fun cl_0_0 () Bool)
(declare-fun cl_0_1 () Bool)
(declare-fun cl_1_0 () Bool)
(declare-fun cl_1_1 () Bool)
(declare-fun b_0_0 () Bool)
(declare-fun b_0_1 () Bool)
(declare-fun b_1_0 () Bool)
(declare-fun b_1_1 () Bool)
(assert (let ((.def_0 (not sim_1))) (let ((.def_1 (and .def_0 b_1_1))) (let ((.def_2 (and sim_1 b_1_0))) (let ((.def_3 (or .def_2 .def_1))) (let ((.def_4 (= cl_1_1 .def_3))) (let ((.def_5 (= cl_1_0 b_1_0))) (let ((.def_6 (and .def_5 .def_4))) (let ((.def_7 (not sim_0))) (let ((.def_8 (and .def_7 b_0_1))) (let ((.def_9 (and sim_0 b_0_0))) (let ((.def_10 (or .def_9 .def_8))) (let ((.def_11 (= cl_0_1 .def_10))) (let ((.def_12 (= cl_0_0 b_0_0))) (let ((.def_13 (and .def_12 .def_11))) (let ((.def_14 (and .def_13 .def_6))) .def_14))))))))))))))))
(check-sat)
