(set-logic QF_LRA)
(declare-fun r0 () Real)
(declare-fun r1 () Real)
(declare-fun b0 () Bool)
(declare-fun b1 () Bool)
(assert (let ((.def_0 (* (/ 7423066367551840 557633654917363458102476435069) r1))) (let ((.def_1 (* (/ 16389082152541017 557633654917363458102476435069) r0))) (let ((.def_2 (+ .def_1 .def_0))) (let ((.def_3 (< (/ 15202236693171361464797219868703 627839680123771456086501623131543307137581056) .def_2))) (let ((.def_4 (* (/ 1260951194491589 175626489512740592991338164044) r1))) (let ((.def_5 (* (- (/ 2823680742310999 175626489512740592991338164044)) r0))) (let ((.def_6 (+ .def_5 .def_4))) (let ((.def_7 (<= .def_6 (- (/ 363265866379696838380024618459 263650464241988952734020569520114012004548608))))) (let ((.def_8 (or .def_7 .def_3 b1))) (let ((.def_9 (< (- (/ 363265866379696838380024618459 263650464241988952734020569520114012004548608)) .def_6))) (let ((.def_10 (<= .def_2 (/ 15202236693171361464797219868703 627839680123771456086501623131543307137581056)))) (let ((.def_11 (or .def_10 .def_9 b0))) (let ((.def_12 (and .def_11 .def_8))) .def_12))))))))))))))
(check-sat)
