(set-logic QF_LRA)
(declare-fun r0 () Real)
(declare-fun r1 () Real)
(declare-fun b0 () Bool)
(declare-fun b1 () Bool)
(assert (let ((.def_0 (* (/ 77904928611941 10592766965497275076658685265) r1))) (let ((.def_1 (* (- (/ 717867058550507 31778300896491825229976055795)) r0))) (let ((.def_2 (+ .def_1 .def_0))) (let ((.def_3 (< (- (/ 111849885938883727352251958957 47705581358636027694405329792566132410941440)) .def_2))) (let ((.def_4 (* (/ 300445678542979 280089329036770231951591419321) r1))) (let ((.def_5 (* (/ 8406851808594467 280089329036770231951591419321) r0))) (let ((.def_6 (+ .def_5 .def_4))) (let ((.def_7 (<= .def_6 (/ 59660222690479786937559752514121 2522820395760901323905395643935186015519506432)))) (let ((.def_8 (or .def_7 .def_3 b0))) (let ((.def_9 (< (/ 59660222690479786937559752514121 2522820395760901323905395643935186015519506432) .def_6))) (let ((.def_10 (<= .def_2 (- (/ 111849885938883727352251958957 47705581358636027694405329792566132410941440))))) (let ((.def_11 (or .def_10 .def_9 b1))) (let ((.def_12 (and .def_11 .def_8))) .def_12))))))))))))))
(check-sat)
