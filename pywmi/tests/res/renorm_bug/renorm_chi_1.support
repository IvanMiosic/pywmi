(set-logic QF_LRA)
(declare-fun r0 () Real)
(declare-fun r1 () Real)
(declare-fun b0 () Bool)
(declare-fun b1 () Bool)
(assert (let ((.def_0 (* (- (/ 446944726093735 507317480343786639632260323789)) r1))) (let ((.def_1 (* (/ 4232156459758166 507317480343786639632260323789) r0))) (let ((.def_2 (+ .def_1 .def_0))) (let ((.def_3 (< (/ 8628608941272111044021124269501 2284754815434816439212882586220233547625529344) .def_2))) (let ((.def_4 (* (/ 47692505781163 838865418322062768557203312) r1))) (let ((.def_5 (* (- (/ 10989324669393 52429088645128923034825207)) r0))) (let ((.def_6 (+ .def_5 .def_4))) (let ((.def_7 (<= .def_6 (- (/ 88619286405348764874117651249 3777913985369237132371459131585734222282752))))) (let ((.def_8 (or .def_7 .def_3 b1))) (let ((.def_9 (< (- (/ 88619286405348764874117651249 3777913985369237132371459131585734222282752)) .def_6))) (let ((.def_10 (<= .def_2 (/ 8628608941272111044021124269501 2284754815434816439212882586220233547625529344)))) (let ((.def_11 (or .def_10 .def_9 b0))) (let ((.def_12 (and .def_11 .def_8))) .def_12))))))))))))))
(check-sat)
