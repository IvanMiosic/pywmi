(set-logic QF_RDL)
(declare-fun x () Real)
(declare-fun x0 () Real)
(declare-fun x1 () Real)
(declare-fun x2 () Real)
(declare-fun x3 () Real)
(assert (let ((.def_0 (<= x x3))) (let ((.def_1 (<= x x2))) (let ((.def_2 (<= x x1))) (let ((.def_3 (<= x x0))) (let ((.def_4 (and false .def_3))) (let ((.def_5 (not .def_4))) (let ((.def_6 (or false .def_3))) (let ((.def_7 (and .def_6 .def_5))) (let ((.def_8 (and .def_7 .def_2))) (let ((.def_9 (not .def_8))) (let ((.def_10 (or .def_7 .def_2))) (let ((.def_11 (and .def_10 .def_9))) (let ((.def_12 (and .def_11 .def_1))) (let ((.def_13 (not .def_12))) (let ((.def_14 (or .def_11 .def_1))) (let ((.def_15 (and .def_14 .def_13))) (let ((.def_16 (and .def_15 .def_0))) (let ((.def_17 (not .def_16))) (let ((.def_18 (or .def_15 .def_0))) (let ((.def_19 (and .def_18 .def_17))) (let ((.def_20 (<= x3 (/ 7656119366529843 9007199254740992)))) (let ((.def_21 (<= (/ 6124895493223875 36028797018963968) x3))) (let ((.def_22 (<= x2 (/ 7746191359077253 9007199254740992)))) (let ((.def_23 (<= (/ 5764607523034235 36028797018963968) x2))) (let ((.def_24 (<= x1 (/ 7836263351624663 9007199254740992)))) (let ((.def_25 (<= (/ 5404319552844595 36028797018963968) x1))) (let ((.def_26 (<= x0 (/ 7926335344172073 9007199254740992)))) (let ((.def_27 (<= (/ 1261007895663739 9007199254740992) x0))) (let ((.def_28 (<= x (/ 8016407336719483 9007199254740992)))) (let ((.def_29 (<= (/ 1170935903116329 9007199254740992) x))) (let ((.def_30 (and true .def_29))) (let ((.def_31 (and .def_30 .def_28))) (let ((.def_32 (and .def_31 .def_27))) (let ((.def_33 (and .def_32 .def_26))) (let ((.def_34 (and .def_33 .def_25))) (let ((.def_35 (and .def_34 .def_24))) (let ((.def_36 (and .def_35 .def_23))) (let ((.def_37 (and .def_36 .def_22))) (let ((.def_38 (and .def_37 .def_21))) (let ((.def_39 (and .def_38 .def_20))) (let ((.def_40 (and .def_39 .def_19))) .def_40))))))))))))))))))))))))))))))))))))))))))
(check-sat)
