(set-logic QF_RDL)
(declare-fun x () Real)
(declare-fun x0 () Real)
(declare-fun x1 () Real)
(declare-fun x2 () Real)
(declare-fun x3 () Real)
(assert (let ((.def_0 (<= x3 (/ 7656119366529843 9007199254740992)))) (let ((.def_1 (<= (/ 6124895493223875 36028797018963968) x3))) (let ((.def_2 (<= x2 (/ 7746191359077253 9007199254740992)))) (let ((.def_3 (<= (/ 5764607523034235 36028797018963968) x2))) (let ((.def_4 (<= x1 (/ 7836263351624663 9007199254740992)))) (let ((.def_5 (<= (/ 5404319552844595 36028797018963968) x1))) (let ((.def_6 (<= x0 (/ 7926335344172073 9007199254740992)))) (let ((.def_7 (<= (/ 1261007895663739 9007199254740992) x0))) (let ((.def_8 (<= x (/ 8016407336719483 9007199254740992)))) (let ((.def_9 (<= (/ 1170935903116329 9007199254740992) x))) (let ((.def_10 (and true .def_9))) (let ((.def_11 (and .def_10 .def_8))) (let ((.def_12 (and .def_11 .def_7))) (let ((.def_13 (and .def_12 .def_6))) (let ((.def_14 (and .def_13 .def_5))) (let ((.def_15 (and .def_14 .def_4))) (let ((.def_16 (and .def_15 .def_3))) (let ((.def_17 (and .def_16 .def_2))) (let ((.def_18 (and .def_17 .def_1))) (let ((.def_19 (and .def_18 .def_0))) (let ((.def_20 (<= x x3))) (let ((.def_21 (<= x x2))) (let ((.def_22 (<= x x1))) (let ((.def_23 (<= x x0))) (let ((.def_24 (or .def_23 .def_22 .def_21 .def_20))) (let ((.def_25 (not .def_23))) (let ((.def_26 (not .def_20))) (let ((.def_27 (or .def_26 .def_25))) (let ((.def_28 (not .def_22))) (let ((.def_29 (or .def_26 .def_28))) (let ((.def_30 (not .def_21))) (let ((.def_31 (or .def_26 .def_30))) (let ((.def_32 (or .def_28 .def_30))) (let ((.def_33 (or .def_25 .def_30))) (let ((.def_34 (or .def_25 .def_28))) (let ((.def_35 (and .def_34 .def_33 .def_32 .def_31 .def_29 .def_27))) (let ((.def_36 (and .def_35 .def_24))) (let ((.def_37 (and .def_36 .def_19))) .def_37)))))))))))))))))))))))))))))))))))))))
(check-sat)
